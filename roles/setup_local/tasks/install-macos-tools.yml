- name: Install homebrew
  become: true
  block:
    - name: verify xcode installed
      ansible.builtin.shell:
        cmd: xcode-select -p
      register: xcode_select_output
      ignore_errors: yes
    
    - name: check return code
      ansible.builtin.debug:
        msg: >
          {% if xcode_select_output.rc == 0 %}
            Xcode command line tools are installed.
          {% else %}
            Xcode command line tools are not installed.
          {% endif %}

    - name: Install if return code not equal to 0
      ansible.builtin.shell:
        cmd: softwareupdate --install -a
      when: xcode_select_output.rc != 0

    - name: Accept Xcode license agreement
      ansible.builtin.shell:
        cmd: xcodebuild -license accept
      when: xcode_select_output.rc != 0

    - name: Ensure Homebrew is installed
      community.general.homebrew:
        state: present

    - name: Verify Homebrew installation
      ansible.builtin.shell:
        cmd: /usr/local/bin/brew --version
      register: brew_version

    - name: Print Homebrew version
      ansible.builtin.debug:
        msg: "Homebrew version: {{ brew_version.stdout }}"
  when: installPackageManager | default(true)

- name: Install tools
  community.general.homebrew:
    name: git, awscli, jq, yq, wget
    state: present

- name: Install podman
  block:
    - name: Check if Podman is installed
      command: podman --version
      register: podman_version
      ignore_errors: yes      

    - name: install podman
      community.general.homebrew:
        name: podman
        state: present
      when: podman_version.rc != 0

    - name: Get podman system info
      ansible.builtin.shell:
        cmd: podman system info
      register: podman_system_info
      ignore_errors: yes

    - name: Get podman machine list
      ansible.builtin.shell:
        cmd: podman machine list --format json
      register: podman_machine_list
      when: podman_version.rc == 0  
    
    - name: Parse Podman machine list
      set_fact:
        podman_machines: "{{ podman_machine_list.stdout | from_json }}"
      when: podman_machine_list.rc == 0

    - name: check if a machine is initialized
      set_fact:
        podman_machine_initialized: "{{ podman_machines | selectattr('Name', 'defined') | list | length > 0 }}"
      
    - name: initialize or start podman
      debug:
        var: podman_machine_initialized
    
    - name: initialize podman
      ansible.builtin.shell:
        cmd: podman machine init
      when: not podman_machine_initialized

    - name: Get machines list
      ansible.builtin.shell:
        cmd: podman machine list --format json
      register: list_machines_status
    
    - name: Parse Podman machine list
      set_fact:
        podman_machines: "{{ list_machines_status.stdout | from_json }}"
      when: podman_machine_list.rc == 0

    - name: start machine if its not running
      ansible.builtin.shell:
        cmd: podman machine start
      when: not podman_machines[0].Running
    
